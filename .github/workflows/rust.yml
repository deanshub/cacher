name: Rust CI

on:
  push:
    branches: [master]
    tags:
      - 'v*'
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: cacher

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Publish to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --token ${{ secrets.CRATES_IO_TOKEN }}

  release:
    name: Build and Release
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: ${{ env.BINARY_NAME }}
            asset_name: ${{ env.BINARY_NAME }}-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: ${{ env.BINARY_NAME }}
            asset_name: ${{ env.BINARY_NAME }}-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: ${{ env.BINARY_NAME }}
            asset_name: ${{ env.BINARY_NAME }}-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: ${{ env.BINARY_NAME }}
            asset_name: ${{ env.BINARY_NAME }}-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: ${{ env.BINARY_NAME }}.exe
            asset_name: ${{ env.BINARY_NAME }}-windows-amd64.exe

    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      
      - name: Install cross-compilation dependencies (Linux ARM)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu' }}
      
      - name: Prepare asset
        shell: bash
        run: |
          mkdir -p release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/${{ matrix.asset_name }}
            chmod +x release/${{ matrix.asset_name }}
          fi
      
      - name: Upload binaries to release
        uses: softprops/action-gh-release@v1
        with:
          files: release/${{ matrix.asset_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
